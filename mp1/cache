    class ctor:
    def __init__(self, row, col, cost, tcost):
        self.row = row
        self.col = col
        self.position = (row, col)
        self.sofarcost = 0
        self.cost = cost  # heuristic
        self.tcost = tcost  # f = g + h（total）
        self.prev = None
        self.not_visited = []
        self.objective_left = []

    def __lt__(self, other):
        return self.tcost < other.tcost

def astar_multi(maze):
    # TODO: Write your code here
    # return path, num_states_explored
    num_of_state = 0
    if len(maze.getObjectives()) == 1:
        start_1 = maze.getStart()
        end_1 = maze.getObjectives()[0]
        return cost_sofar(maze, start_1, end_1)

    start = maze.getStart() #Get starting point
    goals_left = maze.getObjectives()
    goals_left.insert(0, start)
    edge_list = {}
    heuristic_list = {}
    # building graph for mst
    for i in goals_left:
        for j in goals_left:
            if i != j:
                construct_path = cost_sofar(maze, i, j)[0]
                edge_list[(i, j)] = construct_path
                heuristic_list[(i, j)] = len(construct_path)
                num_of_state += 10
    not_visited_list = {}
    visited = {}
    cur_path = PriorityQueue()
    mst_weights = get_MST(maze, goals_left, heuristic_list)
    start_r, start_c = maze.getStart()
    start_state = ctor(start_r, start_c, 0, mst_weights)
    start_state.not_visited = maze.getObjectives()

    cur_path.put(start_state)
    not_visited_list[(start_r, start_c)] = len(start_state.not_visited)

    while len(goals_left):
        cur_state = cur_path.get()
        if not cur_state.not_visited:
            break
        for n in cur_state.not_visited:
            n_row, n_col = n
            n_cost = cur_state.cost + \
                heuristic_list[(cur_state.position, n)] - 1
            next_state = ctor(n_row, n_col, n_cost, 0)
            next_state.prev = cur_state
            next_state.not_visited = deepcopy(cur_state.not_visited)
            if n in next_state.not_visited:
                next_state.not_visited.remove(n)
            visited[(n_row, n_col)] = 0
            not_visited_list[n] = len(next_state.not_visited)
            mst_weights = get_MST(maze, cur_state.not_visited, heuristic_list)
            next_state.tcost = n_cost + mst_weights
            a = len(goals_left) - 1
            if a:
                next_state.tcost += len(next_state.not_visited)
            cur_path.put(next_state)
    ret_path1 = print_path(maze, edge_list, cur_state, visited)
    return ret_path1


def print_path(maze, path, state, visited):
    ret_path = []
    goals_list = []
    while state:
        goals_list.append(state.position)
        state = state.prev
    total_dot = len(goals_list)-1
    for i in range(total_dot):
        ret_path += path[(goals_list[i], goals_list[i+1])][:-1]
    start = maze.getStart()
    ret_path.append(start)
    ret_path[::-1]
    return ret_path


def get_MST(maze, goals, heuristic_list):
    # Prim
    if not len(goals):
        return 0
    start = goals[0]
    visited = {}
    visited[start] = True
    MST_edges = []
    mst_weights = 0
    while len(visited) < len(goals):
        qe = PriorityQueue()
        for v in visited:
            for n in goals:
                if visited.get(n) == True:
                    continue
                new_edge = (v, n)
                new_cost = heuristic_list[new_edge]-2
                qe.put((new_cost, new_edge))
        add_edge = qe.get()
        MST_edges.append(add_edge[1])
        mst_weights += add_edge[0]
        visited[add_edge[1][1]] = True
    return mst_weights

    def astar_multi(maze):
    """
    Runs A star for part 3 of the assignment in the case where there are
    multiple objectives.

    @param maze: The maze to execute the search on.

    @return path: a list of tuples containing the coordinates of each state in the computed path
    """

    """
    Initial State: Agent at the start state and has not visited any other cities
    Goal State: All other states have been visited
    Gn: Cost of all edges so far
    Heuristic: Manhatten Distance to the nearest unvisited city + total length of MST of unvisited cities
    
    Will a maintain a hash table that stores the MST length for given set of obj
    """
    # TODO: Write your code here
    #Variables needed
    #state representation in the class "state"

    frontier = {}  # Mapping from state to f
    visited = {}  # Mapping from state to g
    prev = {}  # State to state, keep track of the previous state

    objs = maze.getObjectives()
    start = maze.getStart()

    MST_table = {}  # Store mst total length
    Manhatten_table = Compute_Manhatten(objs,maze)
    #Push the starting state
    initState = state(start, 0, objs)
    f_init = Heu_Multi(start, objs, Manhatten_table, MST_table,maze)
    frontier[initState] = f_init
    prev[initState] = None

    while True:
        curState = min(frontier.items(), key=lambda x: x[1])[0]
        curState.print_state()
        if(curState.isGoal()):
            #Reach the goal state
            #Backtrace to get the path
            path = []
            ite = curState
            while ite is not None:
                path.insert(0, ite.node)
                ite = prev[ite]
            return path
        #Remove from frontier
        frontier.pop(curState)
        visited[curState] = curState.g
        #Loop through neighbors
        curNode = curState.node
        cur_g = curState.g
        cur_objs = curState.objs[:]
        for node in maze.getNeighbors(curNode[0], curNode[1]):
            new_g = cur_g + 1
            new_objs = cur_objs[:]
            if node in cur_objs:
                new_objs.remove(node)
            reached_state = state(node, new_g, new_objs)
            flag = 0
            new_f = new_g + reached_state.getH_multi(
                Heu_Multi, MST_table, Manhatten_table, maze)

            for x in visited:
                if x == reached_state:
                    flag = 1
                    if reached_state < x:
                        visited.pop(x)
                        frontier[reached_state] = new_f
                        prev[reached_state] = curState
                    break
            if flag:
                continue

            flag = 0
            for x in frontier:
                if x == reached_state:
                    flag = 1
                    if reached_state < x:
                        frontier.pop(x)
                        frontier[reached_state] = new_f
                        prev[reached_state] = curState
                    break
            if flag:
                continue

            frontier[reached_state] = new_f
            prev[reached_state] = curState

    return []

    class ctor:
    def __init__(self, row, col, cost, tcost):
        self.row = row
        self.col = col
        self.position = (row, col)
        self.sofarcost = 0
        self.cost = cost  # heuristic
        self.tcost = tcost  # f = g + h（total）
        self.prev = None
        self.not_visited = []
        self.objective_left = []

    def __lt__(self, other):
        return self.tcost < other.tcost
    def print_state(self):
        print("CurNode:",self.position,"Unvisited:",self.not_visited)

def astar_multi(maze):
    # TODO: Write your code here
    # return path, num_states_explored
    num_of_state = 0
    if len(maze.getObjectives()) == 1:
        start_1 = maze.getStart()
        end_1 = maze.getObjectives()[0]
        return cost_sofar(maze, start_1, end_1)

    start = maze.getStart() #Get starting point
    goals_left = maze.getObjectives()
    goals_left.insert(0, start)
    edge_list = {}
    heuristic_list = {}
    # building graph for mst
    for i in goals_left:
        for j in goals_left:
            if i != j:
                construct_path = cost_sofar(maze, i, j)[0]
                edge_list[(i, j)] = construct_path
                heuristic_list[(i, j)] = len(construct_path)
                num_of_state += 10
    not_visited_list = {}
    visited = {}
    cur_path = PriorityQueue()
    mst_weights = get_MST(maze, goals_left, heuristic_list)
    start_r, start_c = maze.getStart()
    start_state = ctor(start_r, start_c, 0, mst_weights)
    start_state.not_visited = maze.getObjectives()

    cur_path.put(start_state)
    not_visited_list[(start_r, start_c)] = len(start_state.not_visited)

    while len(goals_left):
        cur_state = cur_path.get()
        print(cur_state)
        if not cur_state.not_visited:
            break
        for n in cur_state.not_visited:
            n_row, n_col = n
            n_cost = cur_state.cost + \
                heuristic_list[(cur_state.position, n)] - 1
            next_state = ctor(n_row, n_col, n_cost, 0)
            next_state.prev = cur_state
            next_state.not_visited = deepcopy(cur_state.not_visited)
            if n in next_state.not_visited:
                next_state.not_visited.remove(n)
            visited[(n_row, n_col)] = 0
            not_visited_list[n] = len(next_state.not_visited)
            mst_weights = get_MST(maze, cur_state.not_visited, heuristic_list)
            next_state.tcost = n_cost + mst_weights
            a = len(goals_left) - 1
            if a:
                next_state.tcost += len(next_state.not_visited)
            cur_path.put(next_state)
    ret_path1 = print_path(maze, edge_list, cur_state, visited)
    return ret_path1


def print_path(maze, path, state, visited):
    ret_path = []
    goals_list = []
    while state:
        goals_list.append(state.position)
        state = state.prev
    total_dot = len(goals_list)-1
    for i in range(total_dot):
        ret_path += path[(goals_list[i], goals_list[i+1])][:-1]
    start = maze.getStart()
    ret_path.append(start)
    ret_path[::-1]
    return ret_path


def get_MST(maze, goals, heuristic_list):
    # Prim
    if not len(goals):
        return 0
    start = goals[0]
    visited = {}
    visited[start] = True
    MST_edges = []
    mst_weights = 0
    while len(visited) < len(goals):
        qe = PriorityQueue()
        for v in visited:
            for n in goals:
                if visited.get(n) == True:
                    continue
                new_edge = (v, n)
                new_cost = heuristic_list[new_edge]-2
                qe.put((new_cost, new_edge))
        add_edge = qe.get()
        MST_edges.append(add_edge[1])
        mst_weights += add_edge[0]
        visited[add_edge[1][1]] = True
    return mst_weights